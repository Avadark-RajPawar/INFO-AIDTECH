# -*- coding: utf-8 -*-
"""IrisFlowerClassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rA2UAtEwLiEg9x3KFn5SnF1gjekzLpEn
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
import seaborn as sns

df = pd.read_csv('/content/IRIS.csv')
df.head(5)

df.describe()

df.info()

df['species'].value_counts()

df.isnull().sum()

colours = ['red','green','blue']
species = ['Iris-setosa', 'Iris-versicolor', 'Iris-virginica']

for i in range(3):
  x = df[df['species'] == species[i]]
  plt.scatter(x['sepal_length'], x['sepal_width'], c= colours[i], label=species[i])

plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')
plt.legend()

for i in range(3):
  x = df[df['species'] == species[i]]
  plt.scatter(x['petal_length'], x['petal_width'], c= colours[i], label=species[i])

plt.xlabel('Petal Length')
plt.ylabel('Petal Width')
plt.legend()

for i in range(3):
  x = df[df['species'] == species[i]]
  plt.scatter(x['sepal_length'], x['petal_width'], c= colours[i], label=species[i])

plt.xlabel('Sepal Length')
plt.ylabel('Petal Width')
plt.legend()

for i in range(3):
  x = df[df['species'] == species[i]]
  plt.scatter(x['petal_length'], x['sepal_width'], c= colours[i], label=species[i])

plt.xlabel('Petal Length')
plt.ylabel('Sepal Width')
plt.legend()

correlation = df.corr()
fig, ax = plt.subplots(figsize=(5,4))
sns.heatmap(correlation, annot=True, ax=ax, cmap= 'coolwarm')

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()

df['species'] = le.fit_transform(df['species'])
df.head(10)

from sklearn.model_selection import train_test_split

X = df.drop(columns=['species'])
Y = df['species']

x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.30)

from sklearn.neighbors import KNeighborsClassifier

model = KNeighborsClassifier()

model.fit(x_train, y_train)

print('Accuracy: ', model.score(x_test, y_test)* 100)

from sklearn.tree import DecisionTreeClassifier

model = DecisionTreeClassifier()

model.fit(x_train, y_train)

print('Accuracy: ', model.score(x_test, y_test)* 100)

